<div class="fixed inset-0 overflow-hidden" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
    <div class="absolute inset-0 overflow-hidden">
      <!--
        Background overlay, show/hide based on slide-over state.
  
        Entering: "ease-in-out duration-500"
          From: "opacity-0"
          To: "opacity-100"
        Leaving: "ease-in-out duration-500"
          From: "opacity-100"
          To: "opacity-0"
      -->
      <div class="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <div class="fixed inset-y-0 right-0 pl-10 max-w-full flex">
        <!--
          Slide-over panel, show/hide based on slide-over state.
  
          Entering: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-full"
            To: "translate-x-0"
          Leaving: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-0"
            To: "translate-x-full"
        -->
        <div class="relative w-screen max-w-3xl">
          <!--
            Close button, show/hide based on slide-over state.
  
            Entering: "ease-in-out duration-500"
              From: "opacity-0"
              To: "opacity-100"
            Leaving: "ease-in-out duration-500"
              From: "opacity-100"
              To: "opacity-0"
          -->
          <div class="absolute top-0 left-0 -ml-8 pt-4 pr-2 flex sm:-ml-10 sm:pr-4">
            <button type="button" class="rounded-md text-gray-300 hover:text-white focus:outline-none focus:ring-2 focus:ring-white">
              <span class="sr-only">Close panel</span>
              <!-- Heroicon name: outline/x -->
              <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

  
          <div class="h-full flex flex-col bg-white shadow-xl overflow-y-scroll">
            <div class="px-4 sm:px-6 mt-4">
                <h2 class="text-xl font-semibold text-gray-900" id="slide-over-title">
                    Expediente
                </h2>
                <div class="mt-5">
                    <div class="sm:hidden">
                    <label for="tabs" class="sr-only">Select a tab</label>
                    <!-- Use an "onChange" listener to redirect the user to the selected tab URL. -->
                    <select id="tabs" name="tabs" class="block w-full focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md">
                        <option>Generales</option>
                
                        <option>Historial</option>

												<option >Antropométrico</option>
                
                        <option selected>Hábitos</option>
                
                        <option>Actividad física</option>

                        <option>Notas</option>
                    </select>
                    </div>
                    <div class="hidden sm:block">
                    <nav class="flex space-x-4" aria-label="Tabs">
                        <!-- Current: "bg-indigo-100 text-indigo-700", Default: "text-gray-500 hover:text-gray-700" -->
                        <a href="general" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Generales
                        </a>

                        <a href="history" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Historial
                        </a>

												<a href="anthropometric" class=" text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Antropométrico
                        </a>

                        <a href="habits" class="bg-indigo-100 text-indigo-700 px-3 py-2 font-medium text-sm rounded-md" aria-current="page">
                        Hábitos
                        </a>

                        <a href="physical_activity" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Actividad física
                        </a>
                
                        <a href="notes" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Notas
                        </a>
                    </nav>
                    </div>
                </div>
  
            </div>
            <div class="mt-2 relative flex-1 overflow-y-auto">
              <!-- Replace with your content --> 
            <div class="bg-gray-100 w-full px-6 py-5">
                
                <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6"> <!-- Inicia card Tipo de alimentación --> 
                    <div class="md:grid md:grid-cols-3 md:gap-6">
                        <div class="md:col-span-3">
                            <h3>Tipo de alimentación</h3>
                            <div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
                        
                            <div class="mt-5 md:mt-5 md:col-span-3">
                                <form action="#" method="POST">
                                    <div class="grid grid-cols-6 gap-6">


                                        <div class="col-span-4 sm:col-span-2 mt-1">

                                          <div>
																						<label id="listbox-label-alimentation" class="text-sm">
																								Tipo de alimentación
																						</label>
																						<div class="max-w-screen-2xl mt-1">
																								<div
																												x-data="select({ data: { regular: 'Regular', vegetariana: 'Vegetariana', vegana: 'Vegana', pescetariana: 'Pescetariana'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'Elige una opción' })"
																												x-init="init()"
																												@click.away="closeListbox()"
																												@keydown.escape="closeListbox()"
																												class="relative"
																								>
																												<span class="inline-block w-full rounded-md shadow-sm">
																															<button type="button"
																																			x-ref="button"
																																			@click="toggleListboxVisibility()"
																																			:aria-expanded="open"
																																			aria-haspopup="listbox"
																																			class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																															>
																																		<span
																																						x-show="! open"
																																						x-text="value in options ? options[value] : placeholder"
																																						:class="{ 'text-gray-500': ! (value in options) }"
																																						class="block truncate"
																																		></span>
																				
																																		<input
																																						x-ref="search"
																																						x-show="open"
																																						x-model="search"
																																						@keydown.enter.stop.prevent="selectOption()"
																																						@keydown.arrow-up.prevent="focusPreviousOption()"
																																						@keydown.arrow-down.prevent="focusNextOption()"
																																						type="search"
																																						class="w-full h-full form-control focus:outline-none"
																																		/>
																				
																																		<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																				<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																						<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																									stroke-linejoin="round"></path>
																																				</svg>
																																		</span>
																															</button>
																												</span>
																				
																										<div
																														x-show="open"
																														x-transition:leave="transition ease-in duration-100"
																														x-transition:leave-start="opacity-100"
																														x-transition:leave-end="opacity-0"
																														x-cloak
																														class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																										>
																												<ul
																																x-ref="listbox"
																																@keydown.enter.stop.prevent="selectOption()"
																																@keydown.arrow-up.prevent="focusPreviousOption()"
																																@keydown.arrow-down.prevent="focusNextOption()"
																																role="listbox"
																																:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																tabindex="-1"
																																class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																												>
																														<template x-for="(key, index) in Object.keys(options)" :key="index">
																																<li
																																				:id="name + 'Option' + focusedOptionIndex"
																																				@click="selectOption()"
																																				@mouseenter="focusedOptionIndex = index"
																																				@mouseleave="focusedOptionIndex = null"
																																				role="option"
																																				:aria-selected="focusedOptionIndex === index"
																																				:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																				class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																>
																																				<span x-text="Object.values(options)[index]"
																																							:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																							class="block font-normal truncate"
																																				></span>
																				
																																		<span
																																						x-show="key === value"
																																						:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																						class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																		>
																																						<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																								<path fill-rule="evenodd"
																																											d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																											clip-rule="evenodd"/>
																																						</svg>
																																				</span>
																																</li>
																														</template>
																				
																														<div
																																		x-show="! Object.keys(options).length"
																																		x-text="emptyOptionsMessage"
																																		class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																												</ul>
																										</div>
																								</div>
																				
																								<script>
																										function select(config) {
																												return {
																														data: config.data,
																				
																														emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																				
																														focusedOptionIndex: null,
																				
																														name: config.name,
																				
																														open: false,
																				
																														options: {},
																				
																														placeholder: config.placeholder ?? 'Select an option',
																				
																														search: '',
																				
																														value: config.value,
																				
																														closeListbox: function () {
																																this.open = false
																				
																																this.focusedOptionIndex = null
																				
																																this.search = ''
																														},
																				
																														focusNextOption: function () {
																																if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																				
																																if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																				
																																this.focusedOptionIndex++
																				
																																this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																		block: "center",
																																})
																														},
																				
																														focusPreviousOption: function () {
																																if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																				
																																if (this.focusedOptionIndex <= 0) return
																				
																																this.focusedOptionIndex--
																				
																																this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																		block: "center",
																																})
																														},
																				
																														init: function () {
																																this.options = this.data
																				
																																if (!(this.value in this.options)) this.value = null
																				
																																this.$watch('search', ((value) => {
																																		if (!this.open || !value) return this.options = this.data
																				
																																		this.options = Object.keys(this.data)
																																				.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																				.reduce((options, key) => {
																																						options[key] = this.data[key]
																																						return options
																																				}, {})
																																}))
																														},
																				
																														selectOption: function () {
																																if (!this.open) return this.toggleListboxVisibility()
																				
																																this.value = Object.keys(this.options)[this.focusedOptionIndex]
																				
																																this.closeListbox()
																														},
																				
																														toggleListboxVisibility: function () {
																																if (this.open) return this.closeListbox()
																				
																																this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																				
																																if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																				
																																this.open = true
																				
																																this.$nextTick(() => {
																																		this.$refs.search.focus()
																				
																																		this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																				block: "center"
																																		})
																																})
																														},
																												}
																										}
																								</script>
																						</div>
																				</div>
																					<!--Fin select-->
                                        </div>

                                        <div class="col-span-6 sm:col-span-4">
                                          <label for="first-name" class="text-sm">Otro tipo</label>
                                          <input type="text" name="first-name" id="first-name" autocomplete="given-name" class="placeholder" placeholder="Especificar otro tipo de alimentación">
                                        </div>

                                        
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div> <!-- fin card información personal-->

                <div class="bg-white shadow px-4 py-5 mt-6 sm:rounded-lg sm:p-6">
                    <div class="md:grid md:grid-cols-3 md:gap-6">
                        <div class="md:col-span-3">
                            <h3 >Preferencias y exclusiones de alimentos</h3>
                            <div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
                            
                            <div class="mt-3 md:mt-3 md:col-span-3">
                                <div class="flex justify-between">
                                    <label for="allergies" class="text-sm">Alergias e intolerancias</label> 
                                    <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-full text-indigo-600 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        <!-- Heroicon name: outline/plus -->
                                        <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                        </svg>
                                        Agregar
                                    </button>
                                </div>
                                <div class="mt-0">
                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-yellow-100 text-yellow-800">
                                        Nuez
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-yellow-500 hover:bg-yellow-200 hover:text-yellow-600 focus:outline-none focus:bg-yellow-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-yellow-100 text-yellow-800">
                                        Lacteos
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-yellow-500 hover:bg-yellow-200 hover:text-yellow-600 focus:outline-none focus:bg-yellow-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>
                                </div>
                            </div>

                            <div class="mt-4 md:mt-6 md:col-span-3">
                                <div class="flex justify-between">
                                    <label for="allergies" class="text-sm">Alimentos que no consume</label> 
                                    <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-full text-indigo-600 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                      <!-- Heroicon name: outline/plus -->
                                      <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                      </svg>
                                      Agregar
                                  </button>
                                </div>
                                <div class="mt-0">
                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-yellow-100 text-yellow-800">
                                        Pollo
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-yellow-500 hover:bg-yellow-200 hover:text-yellow-600 focus:outline-none focus:bg-yellow-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-yellow-100 text-yellow-800">
                                        Glúten
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-yellow-500 hover:bg-yellow-200 hover:text-yellow-600 focus:outline-none focus:bg-yellow-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-yellow-100 text-yellow-800">
                                        Origen animal
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-yellow-500 hover:bg-yellow-200 hover:text-yellow-600 focus:outline-none focus:bg-yellow-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>
                                </div>
                            </div>

                            <div class="mt-4 md:mt-6 md:col-span-3">
                                <div class="flex justify-between">
                                    <label for="allergies" class="text-sm">Alimentos preferidos</label> 
                                    <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-full text-indigo-600 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                      <!-- Heroicon name: outline/plus -->
                                      <svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                      </svg>
                                      Agregar
                                  </button>
                                </div>
                                <div class="mt-0">
                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-purple-100 text-purple-800">
                                        Soya texturizada
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-purple-500 hover:bg-purple-200 hover:text-purple-600 focus:outline-none focus:bg-purple-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-purple-100 text-purple-800">
                                        Garbanzo
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-purple-500 hover:bg-purple-200 hover:text-purple-600 focus:outline-none focus:bg-purple-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                    <span class="mt-1 inline-flex rounded-full items-center ml-1 py-0.5 pl-2.5 pr-1 text-md font-medium bg-purple-100 text-purple-800">
                                        Pan integral
                                        <button type="button" class="flex-shrink-0 mt-0.5 ml-2 h-4 w-4 rounded-full inline-flex items-center justify-center text-purple-500 hover:bg-purple-200 hover:text-purple-600 focus:outline-none focus:bg-purple-500 focus:text-white">
                                            <svg class="h-2.5 w-2.5" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                                            <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
                                            </svg>
                                        </button>
                                    </span>

                                </div>
                            </div>

                        </div>
                    </div>
                </div> <!-- fin card preferencias y exclusiones-->

                <div class="bg-white shadow px-4 py-5 mt-6 sm:rounded-lg sm:p-6">
                  <div class="md:grid md:grid-cols-3 md:gap-6">
                      <div class="md:col-span-3">
                          <h3 >Suplementos</h3>
                          <div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
                          <div class="mt-3 md:mt-3 md:col-span-3">
                              <fieldset>
                                  <legend class="text-base font-medium text-gray-900"></legend>
                                  <div class="mt-4 grid grid-cols-4 gap-2">
                                      <div class="flex items-start">
                                      <div class="h-5 flex items-center">
                                          <input id="comments" name="comments" type="checkbox" class="checkbox">
                                      </div>
                                      <div class="ml-3 text-md">
                                          <label for="comments" class="medium">Ninguno</label>
                                      </div>
                                      </div>
                                      <div>
                                      <div class="flex items-start">
                                          <div class="h-5 flex items-center">
                                          <input id="candidates" name="candidates" type="checkbox" class="checkbox">
                                          </div>
                                          <div class="ml-3 text-md">
                                          <label for="candidates" class="medium">Proteína</label>
                                          </div>
                                      </div>
                                      </div>
                                      <div>
                                      <div class="flex items-start">
                                          <div class="h-5 flex items-center">
                                          <input id="offers" name="offers" type="checkbox" class="checkbox">
                                          </div>
                                          <div class="ml-3 text-md">
                                          <label for="offers" class="medium">Multivitamínico</label>
                                          </div>
                                      </div>
                                      </div>
                                      <div>
                                          <div class="flex items-start">
                                              <div class="h-5 flex items-center">
                                              <input id="offers" name="offers" type="checkbox" class="checkbox">
                                              </div>
                                              <div class="ml-3 text-md">
                                              <label for="offers" class="medium">Omega 3</label>
                                              </div>
                                          </div>
                                          </div>
                                      <div>
                                          <div class="flex items-start">
                                              <div class="h-5 flex items-center">
                                              <input id="offers" name="offers" type="checkbox" class="checkbox">
                                              </div>
                                              <div class="ml-3 text-md">
                                              <label for="offers" class="medium">Vitamina C</label>
                                              </div>
                                          </div>
                                          </div>
                                      <div>
                                          <div class="flex items-start">
                                              <div class="h-5 flex items-center">
                                              <input id="offers" name="offers" type="checkbox" class="checkbox">
                                              </div>
                                              <div class="ml-3 text-md">
                                              <label for="offers" class="medium">Ácido fólico</label>
                                              </div>
                                          </div>
                                          </div>
                                      <div>
                                          <div class="flex items-start">
                                              <div class="h-5 flex items-center">
                                              <input id="offers" name="offers" type="checkbox" class="checkbox">
                                              </div>
                                              <div class="ml-3 text-md">
                                              <label for="offers" class="medium">Calcio </label>
                                              </div>
                                          </div>
                                          </div>
                                      <div>
                                          <div class="flex items-start">
                                              <div class="h-5 flex items-center">
                                              <input id="offers" name="offers" type="checkbox" class="checkbox">
                                              </div>
                                              <div class="ml-3 text-md">
                                              <label for="offers" class="medium">Fibra </label>
                                              </div>
                                          </div>
                                        </div>
                                      
                                  </div>
                              </fieldset>


																<div class="col-span-6 sm:col-span-4 mt-8">
																		<label for="motive" class="text-sm">Otro suplemento</label>
																		<input type="text" name="motive" id="motive" autocomplete="motive" class="placeholder">

                              </div>
                          </div>
                      </div>
                  </div>
              </div> <!-- fin card Suplementos-->

                <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6 mt-6"> <!-- Inicia card Habitos --> 
                    <div class="md:grid md:grid-cols-3 md:gap-6">
                        <div class="md:col-span-3">
                            <h3 >Hábitos</h3>
                            <div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
                        
                            <div class="mt-5 md:mt-5 md:col-span-3">
                                <form action="#" method="POST">
                                    <div class="grid grid-cols-6 gap-6">

                                        <div class="col-span-6 sm:col-span-2">
                                          <label for="wakeup-time" class="text-sm">Hora en que se levanta</label>
                                          <div class="mt-1 relative rounded-md">
                                            <input type="text" name="wakeup-time" id="wakeup-time" class="mt-1 p-2 h-10 focus:ring-indigo-500 border focus:border-indigo-500 block w-full pl-2 pr-12 sm:text-md border-gray-300 rounded-md" placeholder="00">
                                            <div class="absolute inset-y-0 right-0 flex items-center">
                                            <label for="wakeup-time" class="sr-only">wakeup-time</label>
                                            <div>
																							<div class="max-w-screen-2xl mt-1">
																									<div
																													x-data="select({ data: { am: 'AM', pm: 'PM'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'AM' })"
																													x-init="init()"
																													@click.away="closeListbox()"
																													@keydown.escape="closeListbox()"
																													class="relative"
																									>
																													<span class="inline-block w-full rounded-md shadow-sm">
																																<button type="button"
																																				x-ref="button"
																																				@click="toggleListboxVisibility()"
																																				:aria-expanded="open"
																																				aria-haspopup="listbox"
																																				class="focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-0 pr-10 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md"
																																>
																																			<span
																																							x-show="! open"
																																							x-text="value in options ? options[value] : placeholder"
																																							:class="{ 'text-gray-500': ! (value in options) }"
																																							class="block truncate"
																																			></span>
																					
																																			<input
																																							x-ref="search"
																																							x-show="open"
																																							x-model="search"
																																							@keydown.enter.stop.prevent="selectOption()"
																																							@keydown.arrow-up.prevent="focusPreviousOption()"
																																							@keydown.arrow-down.prevent="focusNextOption()"
																																							type="search"
																																							class="w-full h-full form-control focus:outline-none"
																																			/>
																					
																																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																										stroke-linejoin="round"></path>
																																					</svg>
																																			</span>
																																</button>
																													</span>
																					
																											<div
																															x-show="open"
																															x-transition:leave="transition ease-in duration-100"
																															x-transition:leave-start="opacity-100"
																															x-transition:leave-end="opacity-0"
																															x-cloak
																															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																											>
																													<ul
																																	x-ref="listbox"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	role="listbox"
																																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																	tabindex="-1"
																																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																													>
																															<template x-for="(key, index) in Object.keys(options)" :key="index">
																																	<li
																																					:id="name + 'Option' + focusedOptionIndex"
																																					@click="selectOption()"
																																					@mouseenter="focusedOptionIndex = index"
																																					@mouseleave="focusedOptionIndex = null"
																																					role="option"
																																					:aria-selected="focusedOptionIndex === index"
																																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																	>
																																					<span x-text="Object.values(options)[index]"
																																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																								class="block font-normal truncate"
																																					></span>
																					
																																			<span
																																							x-show="key === value"
																																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																			>
																																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																									<path fill-rule="evenodd"
																																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																												clip-rule="evenodd"/>
																																							</svg>
																																					</span>
																																	</li>
																															</template>
																					
																															<div
																																			x-show="! Object.keys(options).length"
																																			x-text="emptyOptionsMessage"
																																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																													</ul>
																											</div>
																									</div>
																					
																									<script>
																											function select(config) {
																													return {
																															data: config.data,
																					
																															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																					
																															focusedOptionIndex: null,
																					
																															name: config.name,
																					
																															open: false,
																					
																															options: {},
																					
																															placeholder: config.placeholder ?? 'Select an option',
																					
																															search: '',
																					
																															value: config.value,
																					
																															closeListbox: function () {
																																	this.open = false
																					
																																	this.focusedOptionIndex = null
																					
																																	this.search = ''
																															},
																					
																															focusNextOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																					
																																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																					
																																	this.focusedOptionIndex++
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															focusPreviousOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																					
																																	if (this.focusedOptionIndex <= 0) return
																					
																																	this.focusedOptionIndex--
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															init: function () {
																																	this.options = this.data
																					
																																	if (!(this.value in this.options)) this.value = null
																					
																																	this.$watch('search', ((value) => {
																																			if (!this.open || !value) return this.options = this.data
																					
																																			this.options = Object.keys(this.data)
																																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																					.reduce((options, key) => {
																																							options[key] = this.data[key]
																																							return options
																																					}, {})
																																	}))
																															},
																					
																															selectOption: function () {
																																	if (!this.open) return this.toggleListboxVisibility()
																					
																																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
																					
																																	this.closeListbox()
																															},
																					
																															toggleListboxVisibility: function () {
																																	if (this.open) return this.closeListbox()
																					
																																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																					
																																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																					
																																	this.open = true
																					
																																	this.$nextTick(() => {
																																			this.$refs.search.focus()
																					
																																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																					block: "center"
																																			})
																																	})
																															},
																													}
																											}
																									</script>
																							</div>
																					</div>
																						<!--Fin select-->
                                            </div>
                                          </div>
                                        </div>

                                        <div class="col-span-6 sm:col-span-2">
                                          <label for="sleep-time" class="text-sm">Hora en que se duerme</label>
                                          <div class="mt-1 relative rounded-md">
                                            <input type="text" name="sleep-time" id="sleep-time" class="mt-1 p-2 h-10 focus:ring-indigo-500 border focus:border-indigo-500 block w-full pl-2 pr-12 sm:text-md border-gray-300 rounded-md" placeholder="00">
                                            <div class="absolute inset-y-0 right-0 flex items-center">
                                            <label for="sleep-time" class="sr-only">sleep-time</label>
                                            <div>
																							<div class="max-w-screen-2xl mt-1">
																									<div
																													x-data="select({ data: { am: 'AM', pm: 'PM'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'AM' })"
																													x-init="init()"
																													@click.away="closeListbox()"
																													@keydown.escape="closeListbox()"
																													class="relative"
																									>
																													<span class="inline-block w-full rounded-md shadow-sm">
																																<button type="button"
																																				x-ref="button"
																																				@click="toggleListboxVisibility()"
																																				:aria-expanded="open"
																																				aria-haspopup="listbox"
																																				class="focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-0 pr-10 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md"
																																>
																																			<span
																																							x-show="! open"
																																							x-text="value in options ? options[value] : placeholder"
																																							:class="{ 'text-gray-500': ! (value in options) }"
																																							class="block truncate"
																																			></span>
																					
																																			<input
																																							x-ref="search"
																																							x-show="open"
																																							x-model="search"
																																							@keydown.enter.stop.prevent="selectOption()"
																																							@keydown.arrow-up.prevent="focusPreviousOption()"
																																							@keydown.arrow-down.prevent="focusNextOption()"
																																							type="search"
																																							class="w-full h-full form-control focus:outline-none"
																																			/>
																					
																																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																										stroke-linejoin="round"></path>
																																					</svg>
																																			</span>
																																</button>
																													</span>
																					
																											<div
																															x-show="open"
																															x-transition:leave="transition ease-in duration-100"
																															x-transition:leave-start="opacity-100"
																															x-transition:leave-end="opacity-0"
																															x-cloak
																															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																											>
																													<ul
																																	x-ref="listbox"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	role="listbox"
																																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																	tabindex="-1"
																																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																													>
																															<template x-for="(key, index) in Object.keys(options)" :key="index">
																																	<li
																																					:id="name + 'Option' + focusedOptionIndex"
																																					@click="selectOption()"
																																					@mouseenter="focusedOptionIndex = index"
																																					@mouseleave="focusedOptionIndex = null"
																																					role="option"
																																					:aria-selected="focusedOptionIndex === index"
																																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																	>
																																					<span x-text="Object.values(options)[index]"
																																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																								class="block font-normal truncate"
																																					></span>
																					
																																			<span
																																							x-show="key === value"
																																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																			>
																																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																									<path fill-rule="evenodd"
																																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																												clip-rule="evenodd"/>
																																							</svg>
																																					</span>
																																	</li>
																															</template>
																					
																															<div
																																			x-show="! Object.keys(options).length"
																																			x-text="emptyOptionsMessage"
																																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																													</ul>
																											</div>
																									</div>
																					
																									<script>
																											function select(config) {
																													return {
																															data: config.data,
																					
																															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																					
																															focusedOptionIndex: null,
																					
																															name: config.name,
																					
																															open: false,
																					
																															options: {},
																					
																															placeholder: config.placeholder ?? 'Select an option',
																					
																															search: '',
																					
																															value: config.value,
																					
																															closeListbox: function () {
																																	this.open = false
																					
																																	this.focusedOptionIndex = null
																					
																																	this.search = ''
																															},
																					
																															focusNextOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																					
																																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																					
																																	this.focusedOptionIndex++
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															focusPreviousOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																					
																																	if (this.focusedOptionIndex <= 0) return
																					
																																	this.focusedOptionIndex--
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															init: function () {
																																	this.options = this.data
																					
																																	if (!(this.value in this.options)) this.value = null
																					
																																	this.$watch('search', ((value) => {
																																			if (!this.open || !value) return this.options = this.data
																					
																																			this.options = Object.keys(this.data)
																																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																					.reduce((options, key) => {
																																							options[key] = this.data[key]
																																							return options
																																					}, {})
																																	}))
																															},
																					
																															selectOption: function () {
																																	if (!this.open) return this.toggleListboxVisibility()
																					
																																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
																					
																																	this.closeListbox()
																															},
																					
																															toggleListboxVisibility: function () {
																																	if (this.open) return this.closeListbox()
																					
																																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																					
																																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																					
																																	this.open = true
																					
																																	this.$nextTick(() => {
																																			this.$refs.search.focus()
																					
																																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																					block: "center"
																																			})
																																	})
																															},
																													}
																											}
																									</script>
																							</div>
																					</div>
																						<!--Fin select-->
                                            </div>
                                          </div>
                                        </div>

                                        <div class="col-span-6 sm:col-span-2">
                                          <label for="hungry-time" class="text-sm">Hora con más hambre</label>
                                          <div class="mt-1 relative rounded-md">
                                            <input type="text" name="hungry-time" id="hungry-time" class="mt-1 p-2 h-10 focus:ring-indigo-500 border focus:border-indigo-500 block w-full pl-2 pr-12 sm:text-md border-gray-300 rounded-md" placeholder="00">
                                            <div class="absolute inset-y-0 right-0 flex items-center">
                                            <label for="hungry-time" class="sr-only">hungry-time</label>
                                            <div>
																							<div class="max-w-screen-2xl mt-1">
																									<div
																													x-data="select({ data: { am: 'AM', pm: 'PM'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'AM' })"
																													x-init="init()"
																													@click.away="closeListbox()"
																													@keydown.escape="closeListbox()"
																													class="relative"
																									>
																													<span class="inline-block w-full rounded-md shadow-sm">
																																<button type="button"
																																				x-ref="button"
																																				@click="toggleListboxVisibility()"
																																				:aria-expanded="open"
																																				aria-haspopup="listbox"
																																				class="focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-0 pr-10 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md"
																																>
																																			<span
																																							x-show="! open"
																																							x-text="value in options ? options[value] : placeholder"
																																							:class="{ 'text-gray-500': ! (value in options) }"
																																							class="block truncate"
																																			></span>
																					
																																			<input
																																							x-ref="search"
																																							x-show="open"
																																							x-model="search"
																																							@keydown.enter.stop.prevent="selectOption()"
																																							@keydown.arrow-up.prevent="focusPreviousOption()"
																																							@keydown.arrow-down.prevent="focusNextOption()"
																																							type="search"
																																							class="w-full h-full form-control focus:outline-none"
																																			/>
																					
																																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																										stroke-linejoin="round"></path>
																																					</svg>
																																			</span>
																																</button>
																													</span>
																					
																											<div
																															x-show="open"
																															x-transition:leave="transition ease-in duration-100"
																															x-transition:leave-start="opacity-100"
																															x-transition:leave-end="opacity-0"
																															x-cloak
																															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																											>
																													<ul
																																	x-ref="listbox"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	role="listbox"
																																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																	tabindex="-1"
																																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																													>
																															<template x-for="(key, index) in Object.keys(options)" :key="index">
																																	<li
																																					:id="name + 'Option' + focusedOptionIndex"
																																					@click="selectOption()"
																																					@mouseenter="focusedOptionIndex = index"
																																					@mouseleave="focusedOptionIndex = null"
																																					role="option"
																																					:aria-selected="focusedOptionIndex === index"
																																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																	>
																																					<span x-text="Object.values(options)[index]"
																																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																								class="block font-normal truncate"
																																					></span>
																					
																																			<span
																																							x-show="key === value"
																																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																			>
																																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																									<path fill-rule="evenodd"
																																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																												clip-rule="evenodd"/>
																																							</svg>
																																					</span>
																																	</li>
																															</template>
																					
																															<div
																																			x-show="! Object.keys(options).length"
																																			x-text="emptyOptionsMessage"
																																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																													</ul>
																											</div>
																									</div>
																					
																									<script>
																											function select(config) {
																													return {
																															data: config.data,
																					
																															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																					
																															focusedOptionIndex: null,
																					
																															name: config.name,
																					
																															open: false,
																					
																															options: {},
																					
																															placeholder: config.placeholder ?? 'Select an option',
																					
																															search: '',
																					
																															value: config.value,
																					
																															closeListbox: function () {
																																	this.open = false
																					
																																	this.focusedOptionIndex = null
																					
																																	this.search = ''
																															},
																					
																															focusNextOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																					
																																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																					
																																	this.focusedOptionIndex++
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															focusPreviousOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																					
																																	if (this.focusedOptionIndex <= 0) return
																					
																																	this.focusedOptionIndex--
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															init: function () {
																																	this.options = this.data
																					
																																	if (!(this.value in this.options)) this.value = null
																					
																																	this.$watch('search', ((value) => {
																																			if (!this.open || !value) return this.options = this.data
																					
																																			this.options = Object.keys(this.data)
																																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																					.reduce((options, key) => {
																																							options[key] = this.data[key]
																																							return options
																																					}, {})
																																	}))
																															},
																					
																															selectOption: function () {
																																	if (!this.open) return this.toggleListboxVisibility()
																					
																																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
																					
																																	this.closeListbox()
																															},
																					
																															toggleListboxVisibility: function () {
																																	if (this.open) return this.closeListbox()
																					
																																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																					
																																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																					
																																	this.open = true
																					
																																	this.$nextTick(() => {
																																			this.$refs.search.focus()
																					
																																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																					block: "center"
																																			})
																																	})
																															},
																													}
																											}
																									</script>
																							</div>
																					</div>
																						<!--Fin select-->
                                            </div>
                                          </div>
                                        </div>

                                        <div class="col-span-6 sm:col-span-4">
                                         
																						<div>
																						<label id="listbox-label-prepare-food" class="text-sm">
																							Tiempo empleado para preparar alimentos
																						</label>
																						<div class="max-w-screen-2xl mt-1">
																								<div
																												x-data="select({ data: { no: 'No cocina', min: '30 minutos al día', hrs: '1 - 2 horas al día', fines: 'Sólo fines de semana'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'Elige una opción' })"
																												x-init="init()"
																												@click.away="closeListbox()"
																												@keydown.escape="closeListbox()"
																												class="relative"
																								>
																												<span class="inline-block w-full rounded-md shadow-sm">
																															<button type="button"
																																			x-ref="button"
																																			@click="toggleListboxVisibility()"
																																			:aria-expanded="open"
																																			aria-haspopup="listbox"
																																			class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																															>
																																		<span
																																						x-show="! open"
																																						x-text="value in options ? options[value] : placeholder"
																																						:class="{ 'text-gray-500': ! (value in options) }"
																																						class="block truncate"
																																		></span>
																				
																																		<input
																																						x-ref="search"
																																						x-show="open"
																																						x-model="search"
																																						@keydown.enter.stop.prevent="selectOption()"
																																						@keydown.arrow-up.prevent="focusPreviousOption()"
																																						@keydown.arrow-down.prevent="focusNextOption()"
																																						type="search"
																																						class="w-full h-full form-control focus:outline-none"
																																		/>
																				
																																		<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																				<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																						<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																									stroke-linejoin="round"></path>
																																				</svg>
																																		</span>
																															</button>
																												</span>
																				
																										<div
																														x-show="open"
																														x-transition:leave="transition ease-in duration-100"
																														x-transition:leave-start="opacity-100"
																														x-transition:leave-end="opacity-0"
																														x-cloak
																														class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																										>
																												<ul
																																x-ref="listbox"
																																@keydown.enter.stop.prevent="selectOption()"
																																@keydown.arrow-up.prevent="focusPreviousOption()"
																																@keydown.arrow-down.prevent="focusNextOption()"
																																role="listbox"
																																:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																tabindex="-1"
																																class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																												>
																														<template x-for="(key, index) in Object.keys(options)" :key="index">
																																<li
																																				:id="name + 'Option' + focusedOptionIndex"
																																				@click="selectOption()"
																																				@mouseenter="focusedOptionIndex = index"
																																				@mouseleave="focusedOptionIndex = null"
																																				role="option"
																																				:aria-selected="focusedOptionIndex === index"
																																				:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																				class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																>
																																				<span x-text="Object.values(options)[index]"
																																							:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																							class="block font-normal truncate"
																																				></span>
																				
																																		<span
																																						x-show="key === value"
																																						:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																						class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																		>
																																						<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																								<path fill-rule="evenodd"
																																											d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																											clip-rule="evenodd"/>
																																						</svg>
																																				</span>
																																</li>
																														</template>
																				
																														<div
																																		x-show="! Object.keys(options).length"
																																		x-text="emptyOptionsMessage"
																																		class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																												</ul>
																										</div>
																								</div>
																				
																								<script>
																										function select(config) {
																												return {
																														data: config.data,
																				
																														emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																				
																														focusedOptionIndex: null,
																				
																														name: config.name,
																				
																														open: false,
																				
																														options: {},
																				
																														placeholder: config.placeholder ?? 'Select an option',
																				
																														search: '',
																				
																														value: config.value,
																				
																														closeListbox: function () {
																																this.open = false
																				
																																this.focusedOptionIndex = null
																				
																																this.search = ''
																														},
																				
																														focusNextOption: function () {
																																if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																				
																																if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																				
																																this.focusedOptionIndex++
																				
																																this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																		block: "center",
																																})
																														},
																				
																														focusPreviousOption: function () {
																																if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																				
																																if (this.focusedOptionIndex <= 0) return
																				
																																this.focusedOptionIndex--
																				
																																this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																		block: "center",
																																})
																														},
																				
																														init: function () {
																																this.options = this.data
																				
																																if (!(this.value in this.options)) this.value = null
																				
																																this.$watch('search', ((value) => {
																																		if (!this.open || !value) return this.options = this.data
																				
																																		this.options = Object.keys(this.data)
																																				.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																				.reduce((options, key) => {
																																						options[key] = this.data[key]
																																						return options
																																				}, {})
																																}))
																														},
																				
																														selectOption: function () {
																																if (!this.open) return this.toggleListboxVisibility()
																				
																																this.value = Object.keys(this.options)[this.focusedOptionIndex]
																				
																																this.closeListbox()
																														},
																				
																														toggleListboxVisibility: function () {
																																if (this.open) return this.closeListbox()
																				
																																this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																				
																																if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																				
																																this.open = true
																				
																																this.$nextTick(() => {
																																		this.$refs.search.focus()
																				
																																		this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																				block: "center"
																																		})
																																})
																														},
																												}
																										}
																								</script>
																						</div>
																				</div>
																					<!--Fin select-->
                                      </div>

                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div> <!-- fin card habitos-->






            </div>

						<!-- Relación con los alimentos--> 

						<div class="bg-gray-100 w-full px-6 py-5">
							<div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
									<div class="md:grid md:grid-cols-3 md:gap-6">
											<div class="md:col-span-3">
													<h3 >Dieta habitual</h3>
													<div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
													<!--Desayuno-->
													<label for="breakfast" class="text-sm text-gray-800">Desayuno </label>
													<div class="border-t border-gray-200 px-0 sm:my-2 sm:mx-0"></div>

													<div class="mt-5 md:mt-5 md:col-span-3">
															<form action="#" method="POST">
																	<div class="grid grid-cols-6 gap-6">
																			<div class="col-span-6 sm:col-span-2">
                                          <label for="time" class="text-sm">Hora </label>
                                          <div class="mt-1 relative rounded-md">
                                            <input type="text" name="time" id="time" class="mt-1 p-2 h-10 focus:ring-indigo-500 border focus:border-indigo-500 block w-full pl-2 pr-12 sm:text-md border-gray-300 rounded-md" placeholder="00">
                                            <div class="absolute inset-y-0 right-0 flex items-center">
                                            <label for="time" class="sr-only">time</label>
                                            <div>
																							<div class="max-w-screen-2xl mt-1">
																									<div
																													x-data="select({ data: { am: 'AM', pm: 'PM'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'AM' })"
																													x-init="init()"
																													@click.away="closeListbox()"
																													@keydown.escape="closeListbox()"
																													class="relative"
																									>
																													<span class="inline-block w-full rounded-md shadow-sm">
																																<button type="button"
																																				x-ref="button"
																																				@click="toggleListboxVisibility()"
																																				:aria-expanded="open"
																																				aria-haspopup="listbox"
																																				class="focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-0 pr-10 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md"
																																>
																																			<span
																																							x-show="! open"
																																							x-text="value in options ? options[value] : placeholder"
																																							:class="{ 'text-gray-500': ! (value in options) }"
																																							class="block truncate"
																																			></span>
																					
																																			<input
																																							x-ref="search"
																																							x-show="open"
																																							x-model="search"
																																							@keydown.enter.stop.prevent="selectOption()"
																																							@keydown.arrow-up.prevent="focusPreviousOption()"
																																							@keydown.arrow-down.prevent="focusNextOption()"
																																							type="search"
																																							class="w-full h-full form-control focus:outline-none"
																																			/>
																					
																																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																										stroke-linejoin="round"></path>
																																					</svg>
																																			</span>
																																</button>
																													</span>
																					
																											<div
																															x-show="open"
																															x-transition:leave="transition ease-in duration-100"
																															x-transition:leave-start="opacity-100"
																															x-transition:leave-end="opacity-0"
																															x-cloak
																															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																											>
																													<ul
																																	x-ref="listbox"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	role="listbox"
																																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																	tabindex="-1"
																																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																													>
																															<template x-for="(key, index) in Object.keys(options)" :key="index">
																																	<li
																																					:id="name + 'Option' + focusedOptionIndex"
																																					@click="selectOption()"
																																					@mouseenter="focusedOptionIndex = index"
																																					@mouseleave="focusedOptionIndex = null"
																																					role="option"
																																					:aria-selected="focusedOptionIndex === index"
																																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																	>
																																					<span x-text="Object.values(options)[index]"
																																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																								class="block font-normal truncate"
																																					></span>
																					
																																			<span
																																							x-show="key === value"
																																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																			>
																																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																									<path fill-rule="evenodd"
																																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																												clip-rule="evenodd"/>
																																							</svg>
																																					</span>
																																	</li>
																															</template>
																					
																															<div
																																			x-show="! Object.keys(options).length"
																																			x-text="emptyOptionsMessage"
																																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																													</ul>
																											</div>
																									</div>
																					
																									<script>
																											function select(config) {
																													return {
																															data: config.data,
																					
																															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																					
																															focusedOptionIndex: null,
																					
																															name: config.name,
																					
																															open: false,
																					
																															options: {},
																					
																															placeholder: config.placeholder ?? 'Select an option',
																					
																															search: '',
																					
																															value: config.value,
																					
																															closeListbox: function () {
																																	this.open = false
																					
																																	this.focusedOptionIndex = null
																					
																																	this.search = ''
																															},
																					
																															focusNextOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																					
																																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																					
																																	this.focusedOptionIndex++
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															focusPreviousOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																					
																																	if (this.focusedOptionIndex <= 0) return
																					
																																	this.focusedOptionIndex--
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															init: function () {
																																	this.options = this.data
																					
																																	if (!(this.value in this.options)) this.value = null
																					
																																	this.$watch('search', ((value) => {
																																			if (!this.open || !value) return this.options = this.data
																					
																																			this.options = Object.keys(this.data)
																																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																					.reduce((options, key) => {
																																							options[key] = this.data[key]
																																							return options
																																					}, {})
																																	}))
																															},
																					
																															selectOption: function () {
																																	if (!this.open) return this.toggleListboxVisibility()
																					
																																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
																					
																																	this.closeListbox()
																															},
																					
																															toggleListboxVisibility: function () {
																																	if (this.open) return this.closeListbox()
																					
																																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																					
																																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																					
																																	this.open = true
																					
																																	this.$nextTick(() => {
																																			this.$refs.search.focus()
																					
																																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																					block: "center"
																																			})
																																	})
																															},
																													}
																											}
																									</script>
																							</div>
																					</div>
																						<!--Fin select-->
                                            </div>
                                          </div>
                                        </div>
													
																			<div class="col-span-6 sm:col-span-2">
																			
																				<!--Select-->
																	
																	<div>
																		<label id="listbox-label-place" class="text-sm">
																				Lugar
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { casa: 'Casa', trabajo: 'Trabajo', establecimiento: 'Establecimiento'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'place', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->

																			</div>
																				<div class="col-span-6 sm:col-span-2	">
																			<div>
																		<label id="listbox-label-distracts" class="text-sm">
																				Tipo de comida
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { preparada: 'Preparada', comprada: 'Comprada', comedor: 'Comedor de trabajo'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
																				</div>
																			
																			<div class="col-span-6 sm:col-span-6 mt-2">
																				<label for="motive" class="text-sm">Descripción de alimentos</label>
																				<input type="text" name="motive" id="motive" autocomplete="motive" class="placeholder">
																		</div>
																			<!--End desayuno-->
																			

																	</div>
																	<!--Colacion-->
																	<label for="breakfast" class="text-sm text-gray-800 mt-6	">Colación</label>
													<div class="border-t border-gray-200 px-0 sm:my-2 sm:mx-0"></div>

													<div class="mt-5 md:mt-5 md:col-span-3">
															<form action="#" method="POST">
																	<div class="grid grid-cols-6 gap-6">
																			<div class="col-span-6 sm:col-span-2">
                                          <label for="time" class="text-sm">Hora </label>
                                          <div class="mt-1 relative rounded-md">
                                            <input type="text" name="time" id="time" class="mt-1 p-2 h-10 focus:ring-indigo-500 border focus:border-indigo-500 block w-full pl-2 pr-12 sm:text-md border-gray-300 rounded-md" placeholder="00">
                                            <div class="absolute inset-y-0 right-0 flex items-center">
                                            <label for="time" class="sr-only">time</label>
                                            <div>
																							<div class="max-w-screen-2xl mt-1">
																									<div
																													x-data="select({ data: { am: 'AM', pm: 'PM'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'AM' })"
																													x-init="init()"
																													@click.away="closeListbox()"
																													@keydown.escape="closeListbox()"
																													class="relative"
																									>
																													<span class="inline-block w-full rounded-md shadow-sm">
																																<button type="button"
																																				x-ref="button"
																																				@click="toggleListboxVisibility()"
																																				:aria-expanded="open"
																																				aria-haspopup="listbox"
																																				class="focus:ring-indigo-500 focus:border-indigo-500 h-full py-0 pl-0 pr-10 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md"
																																>
																																			<span
																																							x-show="! open"
																																							x-text="value in options ? options[value] : placeholder"
																																							:class="{ 'text-gray-500': ! (value in options) }"
																																							class="block truncate"
																																			></span>
																					
																																			<input
																																							x-ref="search"
																																							x-show="open"
																																							x-model="search"
																																							@keydown.enter.stop.prevent="selectOption()"
																																							@keydown.arrow-up.prevent="focusPreviousOption()"
																																							@keydown.arrow-down.prevent="focusNextOption()"
																																							type="search"
																																							class="w-full h-full form-control focus:outline-none"
																																			/>
																					
																																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																										stroke-linejoin="round"></path>
																																					</svg>
																																			</span>
																																</button>
																													</span>
																					
																											<div
																															x-show="open"
																															x-transition:leave="transition ease-in duration-100"
																															x-transition:leave-start="opacity-100"
																															x-transition:leave-end="opacity-0"
																															x-cloak
																															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																											>
																													<ul
																																	x-ref="listbox"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	role="listbox"
																																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																																	tabindex="-1"
																																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																													>
																															<template x-for="(key, index) in Object.keys(options)" :key="index">
																																	<li
																																					:id="name + 'Option' + focusedOptionIndex"
																																					@click="selectOption()"
																																					@mouseenter="focusedOptionIndex = index"
																																					@mouseleave="focusedOptionIndex = null"
																																					role="option"
																																					:aria-selected="focusedOptionIndex === index"
																																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																																	>
																																					<span x-text="Object.values(options)[index]"
																																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																								class="block font-normal truncate"
																																					></span>
																					
																																			<span
																																							x-show="key === value"
																																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																																			>
																																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																									<path fill-rule="evenodd"
																																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																												clip-rule="evenodd"/>
																																							</svg>
																																					</span>
																																	</li>
																															</template>
																					
																															<div
																																			x-show="! Object.keys(options).length"
																																			x-text="emptyOptionsMessage"
																																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																													</ul>
																											</div>
																									</div>
																					
																									<script>
																											function select(config) {
																													return {
																															data: config.data,
																					
																															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																					
																															focusedOptionIndex: null,
																					
																															name: config.name,
																					
																															open: false,
																					
																															options: {},
																					
																															placeholder: config.placeholder ?? 'Select an option',
																					
																															search: '',
																					
																															value: config.value,
																					
																															closeListbox: function () {
																																	this.open = false
																					
																																	this.focusedOptionIndex = null
																					
																																	this.search = ''
																															},
																					
																															focusNextOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																					
																																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																					
																																	this.focusedOptionIndex++
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															focusPreviousOption: function () {
																																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																					
																																	if (this.focusedOptionIndex <= 0) return
																					
																																	this.focusedOptionIndex--
																					
																																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																			block: "center",
																																	})
																															},
																					
																															init: function () {
																																	this.options = this.data
																					
																																	if (!(this.value in this.options)) this.value = null
																					
																																	this.$watch('search', ((value) => {
																																			if (!this.open || !value) return this.options = this.data
																					
																																			this.options = Object.keys(this.data)
																																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																					.reduce((options, key) => {
																																							options[key] = this.data[key]
																																							return options
																																					}, {})
																																	}))
																															},
																					
																															selectOption: function () {
																																	if (!this.open) return this.toggleListboxVisibility()
																					
																																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
																					
																																	this.closeListbox()
																															},
																					
																															toggleListboxVisibility: function () {
																																	if (this.open) return this.closeListbox()
																					
																																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																					
																																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																					
																																	this.open = true
																					
																																	this.$nextTick(() => {
																																			this.$refs.search.focus()
																					
																																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																					block: "center"
																																			})
																																	})
																															},
																													}
																											}
																									</script>
																							</div>
																					</div>
																						<!--Fin select-->
                                            </div>
                                          </div>
                                        </div>
													
																			<div class="col-span-6 sm:col-span-2">
																			
																				<!--Select-->
																	
																	<div>
																		<label id="listbox-label-place" class="text-sm">
																				Lugar
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { casa: 'Casa', trabajo: 'Trabajo', establecimiento: 'Establecimiento'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'place', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->

																			</div>
																				<div class="col-span-6 sm:col-span-2	">
																			<div>
																		<label id="listbox-label-distracts" class="text-sm">
																				Tipo de comida
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { preparada: 'Preparada', comprada: 'Comprada', comedor: 'Comedor de trabajo'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
																				</div>
																			
																			<div class="col-span-6 sm:col-span-6 mt-2">
																				<label for="motive" class="text-sm">Descripción de alimentos</label>
																				<input type="text" name="motive" id="motive" autocomplete="motive" class="placeholder">
																		</div>
													
																	</div>
															</form>
													</div>
											</div>
									</div>

							</div> <!-- fin card dieta habitual-->
			</div>
	</div>
				<!-- Relación con los alimentos--> 
						<div class="bg-gray-100 w-full px-6 py-5">
							<div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
									<div class="md:grid md:grid-cols-3 md:gap-6">
											<div class="md:col-span-3">
													<h3 >Relación con los alimentos</h3>
													<div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
											
													<div class="mt-5 md:mt-5 md:col-span-3">
															<form action="#" method="POST">
																	<div class="grid grid-cols-6 gap-6">
																			<div class="col-span-6 sm:col-span-3">
																				
																				<!--Select-->
																	
																	<div>
																	<label id="listbox-label-distracts" class="text-sm">
																			Distractores a la hora de comer
																	</label>
																	<div class="max-w-screen-2xl mt-1">
																			<div
																							x-data="select({ data: { tv: 'Televisión', cel: 'Celular', compu: 'Computadora'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																							x-init="init()"
																							@click.away="closeListbox()"
																							@keydown.escape="closeListbox()"
																							class="relative"
																			>
																							<span class="inline-block w-full rounded-md shadow-sm">
																										<button type="button"
																														x-ref="button"
																														@click="toggleListboxVisibility()"
																														:aria-expanded="open"
																														aria-haspopup="listbox"
																														class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																										>
																													<span
																																	x-show="! open"
																																	x-text="value in options ? options[value] : placeholder"
																																	:class="{ 'text-gray-500': ! (value in options) }"
																																	class="block truncate"
																													></span>
															
																													<input
																																	x-ref="search"
																																	x-show="open"
																																	x-model="search"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	type="search"
																																	class="w-full h-full form-control focus:outline-none"
																													/>
															
																													<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																															<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																	<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																				stroke-linejoin="round"></path>
																															</svg>
																													</span>
																										</button>
																							</span>
															
																					<div
																									x-show="open"
																									x-transition:leave="transition ease-in duration-100"
																									x-transition:leave-start="opacity-100"
																									x-transition:leave-end="opacity-0"
																									x-cloak
																									class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																					>
																							<ul
																											x-ref="listbox"
																											@keydown.enter.stop.prevent="selectOption()"
																											@keydown.arrow-up.prevent="focusPreviousOption()"
																											@keydown.arrow-down.prevent="focusNextOption()"
																											role="listbox"
																											:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																											tabindex="-1"
																											class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																							>
																									<template x-for="(key, index) in Object.keys(options)" :key="index">
																											<li
																															:id="name + 'Option' + focusedOptionIndex"
																															@click="selectOption()"
																															@mouseenter="focusedOptionIndex = index"
																															@mouseleave="focusedOptionIndex = null"
																															role="option"
																															:aria-selected="focusedOptionIndex === index"
																															:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																															class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																											>
																															<span x-text="Object.values(options)[index]"
																																		:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																		class="block font-normal truncate"
																															></span>
															
																													<span
																																	x-show="key === value"
																																	:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																	class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																													>
																																	<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																			<path fill-rule="evenodd"
																																						d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																						clip-rule="evenodd"/>
																																	</svg>
																															</span>
																											</li>
																									</template>
															
																									<div
																													x-show="! Object.keys(options).length"
																													x-text="emptyOptionsMessage"
																													class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																							</ul>
																					</div>
																			</div>
															
																			<script>
																					function select(config) {
																							return {
																									data: config.data,
															
																									emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
															
																									focusedOptionIndex: null,
															
																									name: config.name,
															
																									open: false,
															
																									options: {},
															
																									placeholder: config.placeholder ?? 'Select an option',
															
																									search: '',
															
																									value: config.value,
															
																									closeListbox: function () {
																											this.open = false
															
																											this.focusedOptionIndex = null
															
																											this.search = ''
																									},
															
																									focusNextOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
															
																											if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
															
																											this.focusedOptionIndex++
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									focusPreviousOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
															
																											if (this.focusedOptionIndex <= 0) return
															
																											this.focusedOptionIndex--
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									init: function () {
																											this.options = this.data
															
																											if (!(this.value in this.options)) this.value = null
															
																											this.$watch('search', ((value) => {
																													if (!this.open || !value) return this.options = this.data
															
																													this.options = Object.keys(this.data)
																															.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																															.reduce((options, key) => {
																																	options[key] = this.data[key]
																																	return options
																															}, {})
																											}))
																									},
															
																									selectOption: function () {
																											if (!this.open) return this.toggleListboxVisibility()
															
																											this.value = Object.keys(this.options)[this.focusedOptionIndex]
															
																											this.closeListbox()
																									},
															
																									toggleListboxVisibility: function () {
																											if (this.open) return this.closeListbox()
															
																											this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
															
																											if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
															
																											this.open = true
															
																											this.$nextTick(() => {
																													this.$refs.search.focus()
															
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center"
																													})
																											})
																									},
																							}
																					}
																			</script>
																	</div>
															</div>
																<!--Fin select-->

																			</div>
													
																			<div class="col-span-6 sm:col-span-3">
																			
																				<!--Select-->
																	
																	<div>
																		<label id="listbox-label-distracts" class="text-sm">
																				Ansiedad al comer (escala del 1 al 10)
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	

																			</div>

																			
																			<div class="col-span-6 sm:col-span-6 mt-2">
																				<label for="motive" class="text-sm">Alimento(s) que provocan preocupación, incomodidad o ansiedad</label>
																				<input type="text" name="motive" id="motive" autocomplete="motive" class="placeholder">
																		</div>
																			
																	</div>
															</form>
													</div>
											</div>
									</div>
							</div> <!-- fin card datos generales-->
			</div>

						<!-- Frecuencia de los alimetos--> 
						<div class="bg-gray-100 w-full px-6 py-5">
							<div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
									<div class="md:grid md:grid-cols-3 md:gap-6">
											<div class="md:col-span-3">
													<h3 >Frecuencia de los alimetos</h3>
													<div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
											
													<div class="mt-5 md:mt-5 md:col-span-3">
															<form action="#" method="POST">
																	<div class="grid grid-cols-6 gap-6">
																			<div class="col-span-6 sm:col-span-3">
																				
																				<!--Select-->
																	
																	<div>
																	<label id="listbox-label-vegetables" class="text-sm">
																			Verduras
																	</label>
																	<div class="max-w-screen-2xl mt-1">
																			<div
																							x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																							x-init="init()"
																							@click.away="closeListbox()"
																							@keydown.escape="closeListbox()"
																							class="relative"
																			>
																							<span class="inline-block w-full rounded-md shadow-sm">
																										<button type="button"
																														x-ref="button"
																														@click="toggleListboxVisibility()"
																														:aria-expanded="open"
																														aria-haspopup="listbox"
																														class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																										>
																													<span
																																	x-show="! open"
																																	x-text="value in options ? options[value] : placeholder"
																																	:class="{ 'text-gray-500': ! (value in options) }"
																																	class="block truncate"
																													></span>
															
																													<input
																																	x-ref="search"
																																	x-show="open"
																																	x-model="search"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	type="search"
																																	class="w-full h-full form-control focus:outline-none"
																													/>
															
																													<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																															<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																	<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																				stroke-linejoin="round"></path>
																															</svg>
																													</span>
																										</button>
																							</span>
															
																					<div
																									x-show="open"
																									x-transition:leave="transition ease-in duration-100"
																									x-transition:leave-start="opacity-100"
																									x-transition:leave-end="opacity-0"
																									x-cloak
																									class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																					>
																							<ul
																											x-ref="listbox"
																											@keydown.enter.stop.prevent="selectOption()"
																											@keydown.arrow-up.prevent="focusPreviousOption()"
																											@keydown.arrow-down.prevent="focusNextOption()"
																											role="listbox"
																											:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																											tabindex="-1"
																											class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																							>
																									<template x-for="(key, index) in Object.keys(options)" :key="index">
																											<li
																															:id="name + 'Option' + focusedOptionIndex"
																															@click="selectOption()"
																															@mouseenter="focusedOptionIndex = index"
																															@mouseleave="focusedOptionIndex = null"
																															role="option"
																															:aria-selected="focusedOptionIndex === index"
																															:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																															class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																											>
																															<span x-text="Object.values(options)[index]"
																																		:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																		class="block font-normal truncate"
																															></span>
															
																													<span
																																	x-show="key === value"
																																	:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																	class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																													>
																																	<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																			<path fill-rule="evenodd"
																																						d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																						clip-rule="evenodd"/>
																																	</svg>
																															</span>
																											</li>
																									</template>
															
																									<div
																													x-show="! Object.keys(options).length"
																													x-text="emptyOptionsMessage"
																													class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																							</ul>
																					</div>
																			</div>
															
																			<script>
																					function select(config) {
																							return {
																									data: config.data,
															
																									emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
															
																									focusedOptionIndex: null,
															
																									name: config.name,
															
																									open: false,
															
																									options: {},
															
																									placeholder: config.placeholder ?? 'Select an option',
															
																									search: '',
															
																									value: config.value,
															
																									closeListbox: function () {
																											this.open = false
															
																											this.focusedOptionIndex = null
															
																											this.search = ''
																									},
															
																									focusNextOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
															
																											if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
															
																											this.focusedOptionIndex++
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									focusPreviousOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
															
																											if (this.focusedOptionIndex <= 0) return
															
																											this.focusedOptionIndex--
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									init: function () {
																											this.options = this.data
															
																											if (!(this.value in this.options)) this.value = null
															
																											this.$watch('search', ((value) => {
																													if (!this.open || !value) return this.options = this.data
															
																													this.options = Object.keys(this.data)
																															.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																															.reduce((options, key) => {
																																	options[key] = this.data[key]
																																	return options
																															}, {})
																											}))
																									},
															
																									selectOption: function () {
																											if (!this.open) return this.toggleListboxVisibility()
															
																											this.value = Object.keys(this.options)[this.focusedOptionIndex]
															
																											this.closeListbox()
																									},
															
																									toggleListboxVisibility: function () {
																											if (this.open) return this.closeListbox()
															
																											this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
															
																											if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
															
																											this.open = true
															
																											this.$nextTick(() => {
																													this.$refs.search.focus()
															
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center"
																													})
																											})
																									},
																							}
																					}
																			</script>
																	</div>
															</div>
																<!--Fin select-->

																			</div>
													
																			<div class="col-span-6 sm:col-span-3">
																			
																				<!--Select-->
																	
																	<div>
																		<label id="listbox-label-fruits" class="text-sm">
																				Frutas
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'distracts', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->

																				</div>

																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-cereals" class="text-sm">
																				Cereales y Tuberculos
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'cereals', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-legums" class="text-sm">
																					Leguminosas
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'legums', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-beef" class="text-sm">
																				Carne de res
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'beef', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-chicken" class="text-sm">
																					Pollo
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'chicken', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-fish" class="text-sm">
																				Pescados y mariscos
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'fish', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-pork" class="text-sm">
																					Carne de cerdo
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'pork', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-sausages" class="text-sm">
																				Embutidos
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'sausages', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-egg" class="text-sm">
																					Huevo
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'egg', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-milk" class="text-sm">
																				Leche
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'milk', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-milk-type" class="text-sm">
																					Tipo de Leche
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { entera: 'Entera', descremada: 'Descremada (light)', semidescremada: 'Semidescremada', deslactosada: 'Deslactosada', lechadas: 'Lechadas (almendras, coco)'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'milk-type', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-yogurt" class="text-sm">
																				Yogurt
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'yogurt', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-cheese" class="text-sm">
																					Queso
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'cheese', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-nuts" class="text-sm">
																				Nueces y semillas
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nuts', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-coffe" class="text-sm">
																					Café
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'coffe', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-sugary-drinks" class="text-sm">
																				Bebidas azucaradas
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'sugary-drinks', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																				<div class="col-span-6 sm:col-span-3">
																				
																					<!--Select-->
																		
																		<div>
																			<label id="listbox-label-snacks" class="text-sm">
																					Botanas
																			</label>
																			<div class="max-w-screen-2xl mt-1">
																					<div
																									x-data="select({ data: { diariamente: 'Diariamente', uno: '1 - 2 veces a la semana', tres: '3 - 5 veces a la semana', mes: '1 - 2 veces al mes', nunca: 'Nunca'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'snacks', placeholder: 'Elige una opción' })"
																									x-init="init()"
																									@click.away="closeListbox()"
																									@keydown.escape="closeListbox()"
																									class="relative"
																					>
																									<span class="inline-block w-full rounded-md shadow-sm">
																												<button type="button"
																																x-ref="button"
																																@click="toggleListboxVisibility()"
																																:aria-expanded="open"
																																aria-haspopup="listbox"
																																class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																												>
																															<span
																																			x-show="! open"
																																			x-text="value in options ? options[value] : placeholder"
																																			:class="{ 'text-gray-500': ! (value in options) }"
																																			class="block truncate"
																															></span>
																	
																															<input
																																			x-ref="search"
																																			x-show="open"
																																			x-model="search"
																																			@keydown.enter.stop.prevent="selectOption()"
																																			@keydown.arrow-up.prevent="focusPreviousOption()"
																																			@keydown.arrow-down.prevent="focusNextOption()"
																																			type="search"
																																			class="w-full h-full form-control focus:outline-none"
																															/>
																	
																															<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																	<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																			<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																						stroke-linejoin="round"></path>
																																	</svg>
																															</span>
																												</button>
																									</span>
																	
																							<div
																											x-show="open"
																											x-transition:leave="transition ease-in duration-100"
																											x-transition:leave-start="opacity-100"
																											x-transition:leave-end="opacity-0"
																											x-cloak
																											class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																							>
																									<ul
																													x-ref="listbox"
																													@keydown.enter.stop.prevent="selectOption()"
																													@keydown.arrow-up.prevent="focusPreviousOption()"
																													@keydown.arrow-down.prevent="focusNextOption()"
																													role="listbox"
																													:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																													tabindex="-1"
																													class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																									>
																											<template x-for="(key, index) in Object.keys(options)" :key="index">
																													<li
																																	:id="name + 'Option' + focusedOptionIndex"
																																	@click="selectOption()"
																																	@mouseenter="focusedOptionIndex = index"
																																	@mouseleave="focusedOptionIndex = null"
																																	role="option"
																																	:aria-selected="focusedOptionIndex === index"
																																	:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																	class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																													>
																																	<span x-text="Object.values(options)[index]"
																																				:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																				class="block font-normal truncate"
																																	></span>
																	
																															<span
																																			x-show="key === value"
																																			:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																			class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																															>
																																			<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																					<path fill-rule="evenodd"
																																								d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																								clip-rule="evenodd"/>
																																			</svg>
																																	</span>
																													</li>
																											</template>
																	
																											<div
																															x-show="! Object.keys(options).length"
																															x-text="emptyOptionsMessage"
																															class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																									</ul>
																							</div>
																					</div>
																	
																					<script>
																							function select(config) {
																									return {
																											data: config.data,
																	
																											emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																	
																											focusedOptionIndex: null,
																	
																											name: config.name,
																	
																											open: false,
																	
																											options: {},
																	
																											placeholder: config.placeholder ?? 'Select an option',
																	
																											search: '',
																	
																											value: config.value,
																	
																											closeListbox: function () {
																													this.open = false
																	
																													this.focusedOptionIndex = null
																	
																													this.search = ''
																											},
																	
																											focusNextOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																	
																													if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																	
																													this.focusedOptionIndex++
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											focusPreviousOption: function () {
																													if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																	
																													if (this.focusedOptionIndex <= 0) return
																	
																													this.focusedOptionIndex--
																	
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center",
																													})
																											},
																	
																											init: function () {
																													this.options = this.data
																	
																													if (!(this.value in this.options)) this.value = null
																	
																													this.$watch('search', ((value) => {
																															if (!this.open || !value) return this.options = this.data
																	
																															this.options = Object.keys(this.data)
																																	.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																	.reduce((options, key) => {
																																			options[key] = this.data[key]
																																			return options
																																	}, {})
																													}))
																											},
																	
																											selectOption: function () {
																													if (!this.open) return this.toggleListboxVisibility()
																	
																													this.value = Object.keys(this.options)[this.focusedOptionIndex]
																	
																													this.closeListbox()
																											},
																	
																											toggleListboxVisibility: function () {
																													if (this.open) return this.closeListbox()
																	
																													this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																	
																													if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																	
																													this.open = true
																	
																													this.$nextTick(() => {
																															this.$refs.search.focus()
																	
																															this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																	block: "center"
																															})
																													})
																											},
																									}
																							}
																					</script>
																			</div>
																	</div>
																		<!--Fin select-->
		
	
																				</div>
																				<div class="col-span-6 sm:col-span-6">
																				
																					<!--Select-->
																		
																		<div>
																		<label id="listbox-label-water" class="text-sm">
																			Consumo de agua natural al día 
																		</label>
																		<div class="max-w-screen-2xl mt-1">
																				<div
																								x-data="select({ data: { menos: 'Menos de un litro', uno: 'De 1 a 2 litros', mas: 'Más de 2 litros', sin: 'Sin registro'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'water', placeholder: 'Elige una opción' })"
																								x-init="init()"
																								@click.away="closeListbox()"
																								@keydown.escape="closeListbox()"
																								class="relative"
																				>
																								<span class="inline-block w-full rounded-md shadow-sm">
																											<button type="button"
																															x-ref="button"
																															@click="toggleListboxVisibility()"
																															:aria-expanded="open"
																															aria-haspopup="listbox"
																															class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																											>
																														<span
																																		x-show="! open"
																																		x-text="value in options ? options[value] : placeholder"
																																		:class="{ 'text-gray-500': ! (value in options) }"
																																		class="block truncate"
																														></span>
																
																														<input
																																		x-ref="search"
																																		x-show="open"
																																		x-model="search"
																																		@keydown.enter.stop.prevent="selectOption()"
																																		@keydown.arrow-up.prevent="focusPreviousOption()"
																																		@keydown.arrow-down.prevent="focusNextOption()"
																																		type="search"
																																		class="w-full h-full form-control focus:outline-none"
																														/>
																
																														<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																																<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																		<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																					stroke-linejoin="round"></path>
																																</svg>
																														</span>
																											</button>
																								</span>
																
																						<div
																										x-show="open"
																										x-transition:leave="transition ease-in duration-100"
																										x-transition:leave-start="opacity-100"
																										x-transition:leave-end="opacity-0"
																										x-cloak
																										class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																						>
																								<ul
																												x-ref="listbox"
																												@keydown.enter.stop.prevent="selectOption()"
																												@keydown.arrow-up.prevent="focusPreviousOption()"
																												@keydown.arrow-down.prevent="focusNextOption()"
																												role="listbox"
																												:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																												tabindex="-1"
																												class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																								>
																										<template x-for="(key, index) in Object.keys(options)" :key="index">
																												<li
																																:id="name + 'Option' + focusedOptionIndex"
																																@click="selectOption()"
																																@mouseenter="focusedOptionIndex = index"
																																@mouseleave="focusedOptionIndex = null"
																																role="option"
																																:aria-selected="focusedOptionIndex === index"
																																:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																																class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																												>
																																<span x-text="Object.values(options)[index]"
																																			:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																			class="block font-normal truncate"
																																></span>
																
																														<span
																																		x-show="key === value"
																																		:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																		class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																														>
																																		<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																				<path fill-rule="evenodd"
																																							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																							clip-rule="evenodd"/>
																																		</svg>
																																</span>
																												</li>
																										</template>
																
																										<div
																														x-show="! Object.keys(options).length"
																														x-text="emptyOptionsMessage"
																														class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																								</ul>
																						</div>
																				</div>
																
																				<script>
																						function select(config) {
																								return {
																										data: config.data,
																
																										emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
																
																										focusedOptionIndex: null,
																
																										name: config.name,
																
																										open: false,
																
																										options: {},
																
																										placeholder: config.placeholder ?? 'Select an option',
																
																										search: '',
																
																										value: config.value,
																
																										closeListbox: function () {
																												this.open = false
																
																												this.focusedOptionIndex = null
																
																												this.search = ''
																										},
																
																										focusNextOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
																
																												if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
																
																												this.focusedOptionIndex++
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										focusPreviousOption: function () {
																												if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
																
																												if (this.focusedOptionIndex <= 0) return
																
																												this.focusedOptionIndex--
																
																												this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																														block: "center",
																												})
																										},
																
																										init: function () {
																												this.options = this.data
																
																												if (!(this.value in this.options)) this.value = null
																
																												this.$watch('search', ((value) => {
																														if (!this.open || !value) return this.options = this.data
																
																														this.options = Object.keys(this.data)
																																.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																																.reduce((options, key) => {
																																		options[key] = this.data[key]
																																		return options
																																}, {})
																												}))
																										},
																
																										selectOption: function () {
																												if (!this.open) return this.toggleListboxVisibility()
																
																												this.value = Object.keys(this.options)[this.focusedOptionIndex]
																
																												this.closeListbox()
																										},
																
																										toggleListboxVisibility: function () {
																												if (this.open) return this.closeListbox()
																
																												this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
																
																												if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
																
																												this.open = true
																
																												this.$nextTick(() => {
																														this.$refs.search.focus()
																
																														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																																block: "center"
																														})
																												})
																										},
																								}
																						}
																				</script>
																		</div>
																</div>
																	<!--Fin select-->
	
																				</div>
														
																					
																			
																	</div>
															</form>
													</div>
											</div>
									</div>
							</div> <!-- fin card datos generales-->
			</div>



              <!-- /End replace -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>