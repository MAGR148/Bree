<div class="fixed inset-0 overflow-hidden" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
    <div class="absolute inset-0 overflow-hidden">
      <!--
        Background overlay, show/hide based on slide-over state.
  
        Entering: "ease-in-out duration-500"
          From: "opacity-0"
          To: "opacity-100"
        Leaving: "ease-in-out duration-500"
          From: "opacity-100"
          To: "opacity-0"
      -->
      <div class="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <div class="fixed inset-y-0 right-0 pl-10 max-w-full flex">
        <!--
          Slide-over panel, show/hide based on slide-over state.
  
          Entering: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-full"
            To: "translate-x-0"
          Leaving: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-0"
            To: "translate-x-full"
        -->
        <div class="relative w-screen max-w-3xl">
          <!--
            Close button, show/hide based on slide-over state.
  
            Entering: "ease-in-out duration-500"
              From: "opacity-0"
              To: "opacity-100"
            Leaving: "ease-in-out duration-500"
              From: "opacity-100"
              To: "opacity-0"
          -->
          <div class="absolute top-0 left-0 -ml-8 pt-4 pr-2 flex sm:-ml-10 sm:pr-4">
            <button type="button" class="rounded-md text-gray-300 hover:text-white focus:outline-none focus:ring-2 focus:ring-white">
              <span class="sr-only">Close panel</span>
              <!-- Heroicon name: outline/x -->
              <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
  
          <div class="h-full flex flex-col bg-white shadow-xl overflow-y-scroll">
            <div class="px-4 sm:px-6 mt-4">
                <h2 class="text-xl font-semibold text-gray-900" id="slide-over-title">
                    Expediente
                </h2>
                <div class="mt-5">
                    <div class="sm:hidden">
                    <label for="tabs" class="sr-only">Select a tab</label>
                    <!-- Use an "onChange" listener to redirect the user to the selected tab URL. -->
                    <select id="tabs" name="tabs" class="block w-full focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md">
                        <option>Generales</option>
                
                        <option >Historial</option>

												<option >Antropométrico</option>
                
                        <option >Hábitos</option>
                
                        <option selected>Actividad física</option>

                        <option>Notas</option>
                    </select>
                    </div>
                    <div class="hidden sm:block">
                    <nav class="flex space-x-4" aria-label="Tabs">
                        <!-- Current: "bg-indigo-100 text-indigo-700", Default: "text-gray-500 hover:text-gray-700" -->
                        <a href="general" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Generales
                        </a>

                        <a href="history" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Historial
                        </a>

												<a href="anthropometric" class=" text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Antropométrico
                        </a>
                
                        <a href="habits" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Hábitos
                        </a>

                        <a href="physical_activity" class= "bg-indigo-100 text-indigo-700 px-3 py-2 font-medium text-sm rounded-md" aria-current="page">
                        Actividad física
                        </a>
                
                        <a href="notes" class="text-gray-500 hover:text-gray-700 px-3 py-2 font-medium text-sm rounded-md">
                        Notas
                        </a>
                    </nav>
                    </div>
                </div>
  
            </div>
						
             <div class="mt-2 relative flex-1 overflow-y-auto">
              <!-- Replace with your content --> 
            <div class="bg-gray-100 w-full px-6 py-5">
                <div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
                    <div class="md:grid md:grid-cols-3 md:gap-6">
                        <div class="md:col-span-3">
                            <h3>Tipo de ejercicio</h3>
                            <div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
                        
                            <div class="mt-3 md:mt-3 md:col-span-3">
                                <fieldset>
                                    <legend class="text-base font-medium text-gray-900"></legend>
																		<!--<div class="text-md">
																			<h5 class="text-lg font-medium leading-6 text-gray-900">Tipo de ejercicio</h5>
																			</div>-->
                                      <div class="grid grid-cols-4">
                                        
																				<div class="mt-4">
																					<label  class="medium">
																						<input type="checkbox" id="ninguna" name="ninguno" class="checkbox"/>
																						Ninguno
																					</label>
																				</div>
																				<div class="mt-4">
																					<label  class="medium">
																						<input type="checkbox" id="walk" name="walk" class="checkbox"/>
																						Caminata
																					</label>
																				</div>
																				<div class="mt-4">
																					<label  class="medium">
																						<input type="checkbox" id="run" name="run" class="checkbox"/>
																						Correr
																					</label>
																				</div>
																				<div class="mt-4">
																					<label  class="medium">
																						<input type="checkbox" id="weights" name="weights" class="checkbox"/>
																						Pesas 
																					</label>
																				</div>
																				<div class="mt-4">
																					<label  class="medium">
																						<input type="checkbox" id="functional" name="functional" class="checkbox"/>
																						Funcional 
																					</label>
																				</div>
																				<div class="mt-4">
																					<label class="medium">
																						<input type="checkbox" id="bike" name="bike" class="checkbox"/>
																						Bicicleta
																					</label>
																				</div>
																				<div class="mt-4">
																					<label class="medium">
																						<input type="checkbox" id="swimming" name="swimming" class="checkbox"/>
																						Natación
																					</label>
																				</div>
																			
                                      </div>	
																			
                                </fieldset>
                                <div class="col-span-6 sm:col-span-4 mt-8">
                                    <label for="motive" class="text-sm">Otro tipo de ejercicio</label>
                                    <input type="text" name="motive" id="motive" autocomplete="motive" class="placeholder">
                                </div>
																<div class="col-span-6 sm:col-span-4 mt-8">
																	<label for="desc_activity" class="text-sm">Descripción de la actividad </label>
																	<textarea name="desc_activity" autocomplete="desc_activity" class="mt-1 px-4 py-14 p-2 border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-md border-gray-300 rounded-md"></textarea>	
																</div>
																	<div class="grid grid-cols-6 gap-6">
																		
																<!--Select-->
																	
																<div class="col-span-6 sm:col-span-6 mt-8">
																	<div>
																	<label id="listbox-label-act-fisica" class="text-sm">
																			Nivel de actividad física
																	</label>
																	<div class="max-w-screen-2xl mt-1">
																			<div
																							x-data="select({ data: { inactivo: 'Inactivo (No realiza actividad física)', principiante: 'Principiante (1 a 6 meses realizando actividad física)', intermedio: 'Intermedio (Más de 6 meses realizando actividad física)', avanzado: 'Avanzado (Más de 1 año realizando actividad física)'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'Elige una opción' })"
																							x-init="init()"
																							@click.away="closeListbox()"
																							@keydown.escape="closeListbox()"
																							class="relative"
																			>
																							<span class="inline-block w-full rounded-md shadow-sm">
																										<button type="button"
																														x-ref="button"
																														@click="toggleListboxVisibility()"
																														:aria-expanded="open"
																														aria-haspopup="listbox"
																														class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																										>
																													<span
																																	x-show="! open"
																																	x-text="value in options ? options[value] : placeholder"
																																	:class="{ 'text-gray-500': ! (value in options) }"
																																	class="block truncate"
																													></span>
															
																													<input
																																	x-ref="search"
																																	x-show="open"
																																	x-model="search"
																																	@keydown.enter.stop.prevent="selectOption()"
																																	@keydown.arrow-up.prevent="focusPreviousOption()"
																																	@keydown.arrow-down.prevent="focusNextOption()"
																																	type="search"
																																	class="w-full h-full form-control focus:outline-none"
																													/>
															
																													<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																															<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																																	<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																																				stroke-linejoin="round"></path>
																															</svg>
																													</span>
																										</button>
																							</span>
															
																					<div
																									x-show="open"
																									x-transition:leave="transition ease-in duration-100"
																									x-transition:leave-start="opacity-100"
																									x-transition:leave-end="opacity-0"
																									x-cloak
																									class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
																					>
																							<ul
																											x-ref="listbox"
																											@keydown.enter.stop.prevent="selectOption()"
																											@keydown.arrow-up.prevent="focusPreviousOption()"
																											@keydown.arrow-down.prevent="focusNextOption()"
																											role="listbox"
																											:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																											tabindex="-1"
																											class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
																							>
																									<template x-for="(key, index) in Object.keys(options)" :key="index">
																											<li
																															:id="name + 'Option' + focusedOptionIndex"
																															@click="selectOption()"
																															@mouseenter="focusedOptionIndex = index"
																															@mouseleave="focusedOptionIndex = null"
																															role="option"
																															:aria-selected="focusedOptionIndex === index"
																															:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																															class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																											>
																															<span x-text="Object.values(options)[index]"
																																		:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																																		class="block font-normal truncate"
																															></span>
															
																													<span
																																	x-show="key === value"
																																	:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																																	class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																													>
																																	<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																																			<path fill-rule="evenodd"
																																						d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																																						clip-rule="evenodd"/>
																																	</svg>
																															</span>
																											</li>
																									</template>
															
																									<div
																													x-show="! Object.keys(options).length"
																													x-text="emptyOptionsMessage"
																													class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
																							</ul>
																					</div>
																			</div>
															
																			<script>
																					function select(config) {
																							return {
																									data: config.data,
															
																									emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
															
																									focusedOptionIndex: null,
															
																									name: config.name,
															
																									open: false,
															
																									options: {},
															
																									placeholder: config.placeholder ?? 'Select an option',
															
																									search: '',
															
																									value: config.value,
															
																									closeListbox: function () {
																											this.open = false
															
																											this.focusedOptionIndex = null
															
																											this.search = ''
																									},
															
																									focusNextOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
															
																											if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
															
																											this.focusedOptionIndex++
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									focusPreviousOption: function () {
																											if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
															
																											if (this.focusedOptionIndex <= 0) return
															
																											this.focusedOptionIndex--
															
																											this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																													block: "center",
																											})
																									},
															
																									init: function () {
																											this.options = this.data
															
																											if (!(this.value in this.options)) this.value = null
															
																											this.$watch('search', ((value) => {
																													if (!this.open || !value) return this.options = this.data
															
																													this.options = Object.keys(this.data)
																															.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																															.reduce((options, key) => {
																																	options[key] = this.data[key]
																																	return options
																															}, {})
																											}))
																									},
															
																									selectOption: function () {
																											if (!this.open) return this.toggleListboxVisibility()
															
																											this.value = Object.keys(this.options)[this.focusedOptionIndex]
															
																											this.closeListbox()
																									},
															
																									toggleListboxVisibility: function () {
																											if (this.open) return this.closeListbox()
															
																											this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
															
																											if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
															
																											this.open = true
															
																											this.$nextTick(() => {
																													this.$refs.search.focus()
															
																													this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																															block: "center"
																													})
																											})
																									},
																							}
																					}
																			</script>
																	</div>
															</div>
																<!--Fin select-->
																<div class="grid grid-cols-6 gap-6">
																	<div class="col-span-6 sm:col-span-3 mt-4">
																		<label for="hora" class="text-sm">Hora en la que se ejercita</label>
																		<input type="time" name="hora" id="hora" autocomplete="family-name" class="placeholder">
																	</div>
																</div>

																
																</div>
													</div>
                        </div>
                    </div>
                </div> <!-- fin card Motivo de consulta-->
								
            </div>
							
						
              <!-- /End replace -->
            </div>
						
						<div class="bg-gray-100 w-full px-6 py-5">
							<div class="bg-white shadow px-4 py-5 sm:rounded-lg sm:p-6">
									<div class="md:grid md:grid-cols-3 md:gap-6">
											<div class="md:col-span-3">
													<h3 class="text-lg font-medium leading-6 text-gray-900">Intensidad </h3>
													<div class="border-t border-gray-200 px-0 sm:my-4 sm:mx-0"></div>
						<legend class="text-base font-medium text-gray-900"></legend>
						
						<div class="mt-4 space-y-4 ">
								<div class="flex items-start">
											
										<div class="grid grid-cols-1">
											<div class="mt-4">
												<label  class="medium">
													<input type="checkbox" id="leve" name="leve" class="checkbox"/>
													Leve
												</label>
											</div>
											<div class="mt-4">
												<label  class="medium">
													<input type="checkbox" id="moderate" name="moderate" class="checkbox"/>
													Moderada
												</label>
											</div>
											<div class="mt-4">
												<label  class="medium">
													<input type="checkbox" id="intense" name="intense" class="checkbox"/>
													Intensa
												</label>
											</div>
																																
										</div>

								</div>
								
				</fieldset>
			<!--Select-->
							
			<div class="col-span-6 sm:col-span-6 mt-4">
				<div>
				<label id="listbox-label-frequency" class="text-sm">
						Frecuencia (días de la semana)
				</label>
				<div class="max-w-xs mt-1">
						<div
										x-data="select({ data: { 1: '1', 2: '2', 3: '3', 4: '4',5: '5', 6: '6', 7: '7'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'Frecuencia', placeholder: 'Elige una opción' })"
										x-init="init()"
										@click.away="closeListbox()"
										@keydown.escape="closeListbox()"
										class="relative"
						>
										<span class="inline-block w-full rounded-md shadow-sm">
													<button type="button"
																	x-ref="button"
																	@click="toggleListboxVisibility()"
																	:aria-expanded="open"
																	aria-haspopup="listbox"
																	class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
													>
																<span
																				x-show="! open"
																				x-text="value in options ? options[value] : placeholder"
																				:class="{ 'text-gray-500': ! (value in options) }"
																				class="block truncate"
																></span>
		
																<input
																				x-ref="search"
																				x-show="open"
																				x-model="search"
																				@keydown.enter.stop.prevent="selectOption()"
																				@keydown.arrow-up.prevent="focusPreviousOption()"
																				@keydown.arrow-down.prevent="focusNextOption()"
																				type="search"
																				class="w-full h-full form-control focus:outline-none"
																/>
		
																<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																		<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																				<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																							stroke-linejoin="round"></path>
																		</svg>
																</span>
													</button>
										</span>
		
								<div
												x-show="open"
												x-transition:leave="transition ease-in duration-100"
												x-transition:leave-start="opacity-100"
												x-transition:leave-end="opacity-0"
												x-cloak
												class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
								>
										<ul
														x-ref="listbox"
														@keydown.enter.stop.prevent="selectOption()"
														@keydown.arrow-up.prevent="focusPreviousOption()"
														@keydown.arrow-down.prevent="focusNextOption()"
														role="listbox"
														:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
														tabindex="-1"
														class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
										>
												<template x-for="(key, index) in Object.keys(options)" :key="index">
														<li
																		:id="name + 'Option' + focusedOptionIndex"
																		@click="selectOption()"
																		@mouseenter="focusedOptionIndex = index"
																		@mouseleave="focusedOptionIndex = null"
																		role="option"
																		:aria-selected="focusedOptionIndex === index"
																		:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																		class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
														>
																		<span x-text="Object.values(options)[index]"
																					:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																					class="block font-normal truncate"
																		></span>
		
																<span
																				x-show="key === value"
																				:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																				class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																>
																				<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																						<path fill-rule="evenodd"
																									d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																									clip-rule="evenodd"/>
																				</svg>
																		</span>
														</li>
												</template>
		
												<div
																x-show="! Object.keys(options).length"
																x-text="emptyOptionsMessage"
																class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
										</ul>
								</div>
						</div>
		
						<script>
								function select(config) {
										return {
												data: config.data,
		
												emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
		
												focusedOptionIndex: null,
		
												name: config.name,
		
												open: false,
		
												options: {},
		
												placeholder: config.placeholder ?? 'Select an option',
		
												search: '',
		
												value: config.value,
		
												closeListbox: function () {
														this.open = false
		
														this.focusedOptionIndex = null
		
														this.search = ''
												},
		
												focusNextOption: function () {
														if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
		
														if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
		
														this.focusedOptionIndex++
		
														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																block: "center",
														})
												},
		
												focusPreviousOption: function () {
														if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
		
														if (this.focusedOptionIndex <= 0) return
		
														this.focusedOptionIndex--
		
														this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																block: "center",
														})
												},
		
												init: function () {
														this.options = this.data
		
														if (!(this.value in this.options)) this.value = null
		
														this.$watch('search', ((value) => {
																if (!this.open || !value) return this.options = this.data
		
																this.options = Object.keys(this.data)
																		.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																		.reduce((options, key) => {
																				options[key] = this.data[key]
																				return options
																		}, {})
														}))
												},
		
												selectOption: function () {
														if (!this.open) return this.toggleListboxVisibility()
		
														this.value = Object.keys(this.options)[this.focusedOptionIndex]
		
														this.closeListbox()
												},
		
												toggleListboxVisibility: function () {
														if (this.open) return this.closeListbox()
		
														this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
		
														if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
		
														this.open = true
		
														this.$nextTick(() => {
																this.$refs.search.focus()
		
																this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																		block: "center"
																})
														})
												},
										}
								}
						</script>
				</div>
		</div>
			<!--Fin select-->

			
						<!--Select-->
							
						<div class="col-span-6 sm:col-span-6 mt-4">
							<div>
							<label id="listbox-label-duration" class="text-sm">
									Duración
							</label>
							<div class="max-w-screen-2xl mt-1">
									<div
													x-data="select({ data: {menos: 'Menos de 30 minutos', 30: '30 minutos a 1 hora', 1: 'Más de 1 hora', 2: 'Más de 2 horas'}, emptyOptionsMessage: 'No se ha seleccionado una opción.', name: 'nivel_de_actividad_fisica', placeholder: 'Elige una opción' })"
													x-init="init()"
													@click.away="closeListbox()"
													@keydown.escape="closeListbox()"
													class="relative"
									>
													<span class="inline-block w-full rounded-md shadow-sm">
																<button type="button"
																				x-ref="button"
																				@click="toggleListboxVisibility()"
																				:aria-expanded="open"
																				aria-haspopup="listbox"
																				class="relative z-0 w-full py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border border-gray-300 rounded-md cursor-default focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
																>
																			<span
																							x-show="! open"
																							x-text="value in options ? options[value] : placeholder"
																							:class="{ 'text-gray-500': ! (value in options) }"
																							class="block truncate"
																			></span>
					
																			<input
																							x-ref="search"
																							x-show="open"
																							x-model="search"
																							@keydown.enter.stop.prevent="selectOption()"
																							@keydown.arrow-up.prevent="focusPreviousOption()"
																							@keydown.arrow-down.prevent="focusNextOption()"
																							type="search"
																							class="w-full h-full form-control focus:outline-none"
																			/>
					
																			<span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
																					<svg class="w-5 h-5 text-gray-400" viewBox="0 0 20 20" fill="none" stroke="currentColor">
																							<path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round"
																										stroke-linejoin="round"></path>
																					</svg>
																			</span>
																</button>
													</span>
					
											<div
															x-show="open"
															x-transition:leave="transition ease-in duration-100"
															x-transition:leave-start="opacity-100"
															x-transition:leave-end="opacity-0"
															x-cloak
															class="absolute z-10 w-full mt-1 bg-white rounded-md shadow-lg"
											>
													<ul
																	x-ref="listbox"
																	@keydown.enter.stop.prevent="selectOption()"
																	@keydown.arrow-up.prevent="focusPreviousOption()"
																	@keydown.arrow-down.prevent="focusNextOption()"
																	role="listbox"
																	:aria-activedescendant="focusedOptionIndex ? name + 'Option' + focusedOptionIndex : null"
																	tabindex="-1"
																	class="py-1 overflow-auto text-base leading-6 rounded-md shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
													>
															<template x-for="(key, index) in Object.keys(options)" :key="index">
																	<li
																					:id="name + 'Option' + focusedOptionIndex"
																					@click="selectOption()"
																					@mouseenter="focusedOptionIndex = index"
																					@mouseleave="focusedOptionIndex = null"
																					role="option"
																					:aria-selected="focusedOptionIndex === index"
																					:class="{ 'text-white bg-indigo-600': index === focusedOptionIndex, 'text-gray-900': index !== focusedOptionIndex }"
																					class="relative py-2 pl-3 text-gray-900 cursor-default select-none pr-9"
																	>
																					<span x-text="Object.values(options)[index]"
																								:class="{ 'font-semibold': index === focusedOptionIndex, 'font-normal': index !== focusedOptionIndex }"
																								class="block font-normal truncate"
																					></span>
					
																			<span
																							x-show="key === value"
																							:class="{ 'text-white': index === focusedOptionIndex, 'text-indigo-600': index !== focusedOptionIndex }"
																							class="absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600"
																			>
																							<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
																									<path fill-rule="evenodd"
																												d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
																												clip-rule="evenodd"/>
																							</svg>
																					</span>
																	</li>
															</template>
					
															<div
																			x-show="! Object.keys(options).length"
																			x-text="emptyOptionsMessage"
																			class="px-3 py-2 text-gray-900 cursor-default select-none"></div>
													</ul>
											</div>
									</div>
					
									<script>
											function select(config) {
													return {
															data: config.data,
					
															emptyOptionsMessage: config.emptyOptionsMessage ?? 'No results match your search.',
					
															focusedOptionIndex: null,
					
															name: config.name,
					
															open: false,
					
															options: {},
					
															placeholder: config.placeholder ?? 'Select an option',
					
															search: '',
					
															value: config.value,
					
															closeListbox: function () {
																	this.open = false
					
																	this.focusedOptionIndex = null
					
																	this.search = ''
															},
					
															focusNextOption: function () {
																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = Object.keys(this.options).length - 1
					
																	if (this.focusedOptionIndex + 1 >= Object.keys(this.options).length) return
					
																	this.focusedOptionIndex++
					
																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																			block: "center",
																	})
															},
					
															focusPreviousOption: function () {
																	if (this.focusedOptionIndex === null) return this.focusedOptionIndex = 0
					
																	if (this.focusedOptionIndex <= 0) return
					
																	this.focusedOptionIndex--
					
																	this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																			block: "center",
																	})
															},
					
															init: function () {
																	this.options = this.data
					
																	if (!(this.value in this.options)) this.value = null
					
																	this.$watch('search', ((value) => {
																			if (!this.open || !value) return this.options = this.data
					
																			this.options = Object.keys(this.data)
																					.filter((key) => this.data[key].toLowerCase().includes(value.toLowerCase()))
																					.reduce((options, key) => {
																							options[key] = this.data[key]
																							return options
																					}, {})
																	}))
															},
					
															selectOption: function () {
																	if (!this.open) return this.toggleListboxVisibility()
					
																	this.value = Object.keys(this.options)[this.focusedOptionIndex]
					
																	this.closeListbox()
															},
					
															toggleListboxVisibility: function () {
																	if (this.open) return this.closeListbox()
					
																	this.focusedOptionIndex = Object.keys(this.options).indexOf(this.value)
					
																	if (this.focusedOptionIndex < 0) this.focusedOptionIndex = 0
					
																	this.open = true
					
																	this.$nextTick(() => {
																			this.$refs.search.focus()
					
																			this.$refs.listbox.children[this.focusedOptionIndex].scrollIntoView({
																					block: "center"
																			})
																	})
															},
													}
											}
									</script>
							</div>
					</div>
						<!--Fin select-->
          </div>
			</div>
						</div>
											</div>
									</div>
							</div>
        </div>
				
      </div>